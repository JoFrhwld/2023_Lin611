{
  "hash": "51f24b192c0c54f1d7c6b10a922fa6e4",
  "result": {
    "markdown": "---\ntitle: \"Starting Multivariate Models\"\ndate: 2023-3-2\norder: 13\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(marginaleffects)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_rt <- read_csv(\"https://raw.githubusercontent.com/bodowinter/applied_statistics_book_data/master/ELP_length_frequency.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 33075 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Word\ndbl (3): Log10Freq, length, RT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Plots\n\nMaking plots of the data before we start modelling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_rt |>\n  ggplot(aes(Log10Freq, RT)) +\n    #geom_point()\n    stat_bin_2d()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nLooks like a negative effect of word frequency on reaction time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_rt |>\n  ggplot(aes(length, RT)) +\n    stat_bin_2d()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nLooks like a positive effect of word length on reaction time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_rt |>\n  ggplot(aes(Log10Freq, length)) +\n    stat_bin_2d()+\n    stat_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nLooks like word frequency and word length are slightly collinear.\n\n## Not ideal (modelling without centering and scaling)\n\n`lm` fits the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_0 <- lm(RT ~ Log10Freq + length, data = word_rt)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(model_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    748.      2.18      344.        0\n2 Log10Freq      -68.0     0.594    -115.        0\n3 length          19.5     0.238      81.9       0\n```\n:::\n:::\n\n\nThe `(Intercept)` value is the predicted value of RT when both `Log10Freq` and `length` are 0. Not a likely combination of values.\n\nGoodness of fit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(model_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squared adj.r.sq…¹ sigma stati…² p.value    df  logLik    AIC    BIC devia…³\n      <dbl>      <dbl> <dbl>   <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>   <dbl>\n1     0.487      0.487  89.1  15717.       0     2 -1.95e5 3.91e5 3.91e5  2.62e8\n# … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names ¹​adj.r.squared, ²​statistic, ³​deviance\n```\n:::\n:::\n\n\n## Scaling and Centering\n\nWe'll center both predictors on their means, and scale by the standard deviation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_rt |>\n  mutate(\n    log_freq_z = (Log10Freq - mean(Log10Freq))/sd(Log10Freq),\n    len_z = (length - mean(length))/sd(length)\n  ) ->\n  word_rt_scaled\n```\n:::\n\n\nLet's actually fit three models,\n\n1.  One for just frequency\n2.  One for just length\n3.  One for frequency *and* length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_f <- lm(RT ~ log_freq_z, data = word_rt_scaled)\nmodel_l <- lm(RT ~ len_z, data = word_rt_scaled)\nmodel_fl <- lm(RT ~ len_z + log_freq_z, data = word_rt_scaled)\n```\n:::\n\n\nWe can examine all of these models goodness of fits together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  freq = model_f,\n  length = model_l,\n  freq_length = model_fl\n) |>\n  map_dfr(glance, .id = \"model\") |> \n  select(model, r.squared, adj.r.squared, AIC, BIC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  model       r.squared adj.r.squared     AIC     BIC\n  <chr>           <dbl>         <dbl>   <dbl>   <dbl>\n1 freq            0.383         0.383 396956. 396981.\n2 length          0.284         0.284 401905. 401930.\n3 freq_length     0.487         0.487 390856. 390889.\n```\n:::\n:::\n\n\nThe first thing to notice is that even though we've centered and scaled the data, the goodness of fit metrics for the `freq_length` mode, (r-squared and adjusted r-squared) are identical to the original multivariate model.\n\nAlso, the goodness of fit always gets better when we add a new predictor, but the adjusted r squared, AIC and BIC try to balance out the complexity of the model and the goodness of fit.\n\n## Evaluating the model\n\nWe can merge information from the model onto the original data with `augment()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(model_fl, word_rt_scaled) |>\n  ggplot(aes(.fitted, .resid))+\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe can also look at the predicted values with `marginaleffects::predictions()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(model_fl, \n            newdata = datagrid(log_freq_z = c(-1, 0, 1),\n                               len_z = c(-1, 0, 1))) |>\n  tibble()->\n  predictions_fl\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions_fl |> \n  ggplot(aes(log_freq_z, estimate))+\n    geom_line(aes(color = factor(len_z)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions_fl |> \n  ggplot(aes(len_z, estimate))+\n    geom_line(aes(color = factor(log_freq_z)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
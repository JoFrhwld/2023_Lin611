{
  "hash": "83ad58fd167c304bec74d8e712dfa280",
  "result": {
    "markdown": "---\ntitle: \"Multivariate models aren't just univariate models glued together\"\nauthor: Josef Fruehwald\ndate: 2023-03-14\norder: 15\nknitr: \n  opts_chunk: \n    message: false\n    warning: false\nfig-width: 6\nfig-height: 4\nfig-align: center\ncode-annotations: select\nerror: true\n---\n\n\nLike the title says, multivariate models aren't just univariate models glued together. In fact, there's no straightforward way to calculate, ahead of time, what the parameters of a model `y ~ x1 + x2` will be if all you have are separate univariate models `y ~ x1` and `y ~ x2`. I'll demonstrate that with an example modelling the bill depth of penguins, using bill length and species as predictors.\n\n::: {layout-ncol=\"2\"}\n![Penguin Species](art/penguins.png){fig-align=\"center\"}\n\n![Bill Measurements](art/culmen_depth.png){fig-align=\"center\"}\n\nArtwork by \\@allison_horst\n:::\n\n## Loading packages\n\nThese are the packages we'll use in this lesson:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # <1>\n\nlibrary(ggbeeswarm)   # <2>\nlibrary(khroma)       # <2>\nlibrary(patchwork)    # <2>\ntheme_set(theme_bw()) # <2>\n\nlibrary(palmerpenguins) # <3>\n\nlibrary(broom)            # <4>\nlibrary(marginaleffects)  # <4>\n```\n:::\n\n\n1.  General data processing\n2.  Data visualization\n3.  The penguins data\n4.  Model investigation\n\n## Penguins, first look\n\nLet's grab just the data columns we're focusing on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>  # <1> \n  select(bill_depth_mm, bill_length_mm, species) |> # <2> \n  drop_na() -> # <3>\n  penguin_focus # <4>\n```\n:::\n\n\n1.  The original penguins data.\n2.  Selecting just the data columns we're focused on.\n3.  Dropping rows that have `NA` values.\n4.  The new data frame.\n\n## Preparing to model\n\nIt's always a good idea to take a look at how each of the variables (outcome and predictor) are distributed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_focus |> \n  ggplot(aes(bill_depth_mm)) + # <1>\n    stat_bin() +                # <1>\n    labs(title = \"Bill Depth Histogram (outcome)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n1.  Plotting a histogram of `bill_depth_mm`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_focus |> \n  ggplot(aes(bill_length_mm)) + # <1>\n    stat_bin() +                  # <1>\n    labs(title = \"Bill Length Histogram (predictor)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n1.  Plotting a histogram of `bill_length_mm`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_focus |> \n  ggplot(aes(species, fill = species))+ # <1>\n    stat_count()+                       # <1>\n    khroma::scale_fill_bright() +        # <2>\n    labs(title = \"Species Counts (predictor)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n1.  Plotting counts of each species.\n2.  Setting a color scheme for species that we'll reuse later.\n\nLet's \"normalize\" the `bill_length_mm` data for modeling by z-scoring it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_focus |> \n  mutate(           # <1> \n    bill_length_z = (bill_length_mm - # <2>\n                       mean(bill_length_mm)) / # <2>\n                    sd(bill_length_mm) # <2>\n  ) ->\n  penguin_focus # <3>\n```\n:::\n\n\n1.  `mutate()` adds new columns.\n2.  We're subtracting the mean and dividing by the standard deviation. $\\frac{x-\\text{mean}(x)}{\\text{sd}(x)}$\n3.  Assigning the result back out.\n\nLet's look at the z-scored histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_focus |> \n  ggplot(aes(bill_length_z)) +    # <1>\n    stat_bin()+                   # <1>\n    labs(title = \"Bill Length (z-scored)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\n1.  Plotting a histogram of `bill_length_z`.\n\n## Fitting the univariate models\n\nNormally, I'd recommend making a plot of the outcome & predictor variable before fitting a model, but just to avoid repeating too much code here, we'll fit the models first, then plot their predicted values on the data.\n\n### Bill Length Model\n\nWe'll start with a univariate (one variable) model, predicting `bill_depth_mm` with `bill_length_z`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_len <- lm(    # <1> \n   bill_depth_mm ~  # <2> \n     bill_length_z, # <3> \n   data = penguin_focus) # <4> \n```\n:::\n\n\n1.  Fitting a linear model\n2.  `bill_depth_mm` is our outcome variable\n3.  `bill_length_z` is our predictor variable\n4.  Using the `penguin_focus` data\n\nWe can look at the model parameters in a dataframe format using `broom::tidy`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(mod_len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 5\n  term          estimate std.error statistic   p.value\n  <chr>            <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)     17.2       0.104    165.   0        \n2 bill_length_z   -0.464     0.104     -4.46 0.0000112\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThe estimated effect of `bill_length_z` is -0.464, meaning that for every 1 standard deviation increase in bill length, we expect bill depth to decrease by -0.464 millimeters.\n\nWe can get the bill depth values this model predicts with the `marginaleffects::predictions()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(      # <1>\n  mod_len,        # <2>\n  newdata = datagrid(   # <3>\n    bill_length_z = c(-2, 1, 0, 1, 2)  # <4>\n  )\n) |> \n  tibble()->    # <5>\n  pred_len\n```\n:::\n\n\n1.  `predictions()` is from the `{marginaleffects}` package.\n2.  This is the model we want to get predictions from.\n3.  We want to get predicted values at specific points/combinations of predictors, so we use the `newdata` argument. `datagrid()` is another function from `{marginaleffects}` that will create a data frame.\n4.  We want to get predicted `bill_depth_mm` values for some representative `bill_length_z` values.\n5.  The output of `predictions()` isn't quite what we want for making a plot, so we convert it with `tibble()`.\n\n<details>\n\n<summary>The `pred_len` dataframe</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_len |> \n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"rowid\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.low\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.high\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_length_z\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"response\",\"3\":\"18.07953\",\"4\":\"0.2327012\",\"5\":\"77.69419\",\"6\":\"0\",\"7\":\"17.62345\",\"8\":\"18.53562\",\"9\":\"17.15117\",\"10\":\"-2\"},{\"1\":\"2\",\"2\":\"response\",\"3\":\"16.68699\",\"4\":\"0.1471086\",\"5\":\"113.43316\",\"6\":\"0\",\"7\":\"16.39866\",\"8\":\"16.97532\",\"9\":\"17.15117\",\"10\":\"1\"},{\"1\":\"3\",\"2\":\"response\",\"3\":\"17.15117\",\"4\":\"0.1039453\",\"5\":\"165.00191\",\"6\":\"0\",\"7\":\"16.94744\",\"8\":\"17.35490\",\"9\":\"17.15117\",\"10\":\"0\"},{\"1\":\"4\",\"2\":\"response\",\"3\":\"16.22281\",\"4\":\"0.2327012\",\"5\":\"69.71519\",\"6\":\"0\",\"7\":\"15.76672\",\"8\":\"16.67889\",\"9\":\"17.15117\",\"10\":\"2\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n</details>\n\nWe can plot these predicted values over top the original data. One thing to know is that the line we plot here is identical to what we'd get if we just added `stat_smooth(method = lm)` to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot( # <1>\n  penguin_focus, # <1> \n  aes(bill_length_z, bill_depth_mm)\n)+ # <1>\n  geom_point() + # <1>\n  geom_line(          # <2>\n    data = pred_len,  # <2>\n    aes(y = estimate), # <3>\n    color = \"steelblue\"\n  )+\n  geom_ribbon(        # <4>\n    data = pred_len,  # <4>\n    aes(               # <5>\n      ymin = conf.low, # <5>\n      ymax = conf.high # <5>\n    ),                 # <5>\n    alpha = 0.3        # <6>\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=576}\n:::\n:::\n\n\n1.  Scatterplot of the full data.\n2.  Adding a line to represent the predicted values, which are in the `pred_len` dataframe.\n3.  In `pred_len`, the predicted bill depth is in the `estimate` column.\n4.  Adding a confidence interval onto the predicted values with `geom_ribbon()`.\n5.  The width of `geom_ribbon()` is determined by the `ymax` and `ymin` aesthetics, and the high and low points of the confidence interval are in the `conf.low` and `conf.high` columns of `pred_len`.\n6.  Setting a transparency on the confidence interval.\n\nSo, as you can see, the line of predicted values of bill depth slopes downwards as bill length increases when we include only `bill_length_z` in the model.\n\n### Species Model.\n\nNow, let's fit a model looking at just an effect of `Species`. I've left the alphabetically first penguin species, Adelie, as the reference level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_species <- lm(     # <1>\n  bill_depth_mm ~      # <2>\n    species,           # <3>\n  data = penguin_focus # <4>\n)\n```\n:::\n\n\n1.  We're fitting a linear model.\n2.  Our outcome variable is `bill_depth_mm`.\n3.  Our predictor variable is `species`.\n4.  We're drawing the data from `penguin_focus`.\n\nAnd again, we can look at the model parameters with `broom::tidy`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(mod_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 5\n  term             estimate std.error statistic  p.value\n  <chr>               <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)       18.3       0.0912   201.    0       \n2 speciesChinstrap   0.0742    0.164      0.453 6.50e- 1\n3 speciesGentoo     -3.36      0.136    -24.7   7.93e-78\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nSo, the predicted bill depth for our reference level (Adelie) is 18.35 millimeters. Chinstraps are estimated to have deeper bills by 0.07mm (not significant), and Gentoos are estimated to have less deep bills by -3.36mm.\n\nLet's get the predicted bill depths from our model to plot over our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(      # <1>\n  mod_species,    # <2>\n  newdata = datagrid( # <3>\n    species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\") # <4>\n  )\n) |> \n  tibble()-> # <5>\n  pred_species\n```\n:::\n\n\n1.  `predictions()` from `{marginaleffects}`.\n2.  We're getting predictions from our `mod_species` model.\n3.  We're getting predicted values for this `newdata` generated by `datagrid`.\n4.  We want predicted values for these specific species.\n5.  Conversion to a dataframe.\n\n<details>\n\n<summary>`pred_species`</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_species |> \n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"rowid\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.low\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.high\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"species\"],\"name\":[10],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"response\",\"3\":\"18.34636\",\"4\":\"0.09121134\",\"5\":\"201.1412\",\"6\":\"0\",\"7\":\"18.16759\",\"8\":\"18.52513\",\"9\":\"17.15117\",\"10\":\"Adelie\"},{\"1\":\"2\",\"2\":\"response\",\"3\":\"18.42059\",\"4\":\"0.13591984\",\"5\":\"135.5254\",\"6\":\"0\",\"7\":\"18.15419\",\"8\":\"18.68699\",\"9\":\"17.15117\",\"10\":\"Chinstrap\"},{\"1\":\"3\",\"2\":\"response\",\"3\":\"14.98211\",\"4\":\"0.10106127\",\"5\":\"148.2478\",\"6\":\"0\",\"7\":\"14.78404\",\"8\":\"15.18019\",\"9\":\"17.15117\",\"10\":\"Gentoo\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n</details>\n\nTo plot the original data by species, I'll create a \"beeswarm\" plot, and add the predicted values on top with a \"pointrange\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(       # <1>\n  penguin_focus,   # <1>\n  aes(         # <1>\n    species,   # <1>\n    bill_depth_mm, # <1>\n    color = species # <2>\n  )\n)+\n  geom_beeswarm( # <3> \n    size = 0.5,  # <4>\n    shape = 1    # <4>\n  )+\n  geom_pointrange(       # <5>\n    data = pred_species, # <6>\n    aes(                 # <7>\n      y = estimate,      # <7>\n      ymin = conf.low,   # <7>\n      ymax = conf.high   # <7>\n    )                    # <7>\n  )+ \n  khroma::scale_color_bright() # <8>\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=576}\n:::\n:::\n\n\n1.  Setting up the plot of the original data.\n2.  Strictly speaking, coloring the data by `species` is redundant for this plot, but we're sticking to a common color scheme across all plots.\n3.  `ggbeeswarm::geom_beeswarm()` is one way to try to deal with plotting a continuous variable against a categorical variable.\n4.  I'm making the data points small and open circles so that they'll be visually distinct from the points we use to plot the predicted values.\n5.  `geom_pointrange()` plot a point to represent the estimated value, and a \"whisker\" to represent the confidence interval.\n6.  Our predicted values are in `pred_species`.\n7.  The predicted value is in the `estimate` column, and the high and low points for the confidence intervals are in `conf.high` and `conf.low`.\n8.  Re-using our consistent color scheme.\n\n### Univariate model recap.\n\nJust to recap what we've seen from our two separate univariate models:\n\n-   When we modelled `bill_depth_mm` with `bill_length_z`, we got an estimated slope of -0.464 .\n\n-   When we predicted `bill_depth_mm` with `species`, we estimated that Chinstraps have a bill depth 0.07mm more than Adelies, and Gentoos have a bill depth -3.36 less than Adelies.\n\n## Fitting the multivariate model\n\nNow, let's see what we get when we fit a multivatiate model, including *both* bill length and species in the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_len_species <- lm( # <1>\n  bill_depth_mm ~      # <2>\n    bill_length_z +    # <3>\n    species,           # <3>\n  data = penguin_focus      # <4>\n)\n```\n:::\n\n\n1.  We're fitting a linear model\n2.  Our outcome variable is `bill_depth_mm`\n3.  Our predictor variables are `bill_length_z` *and* `species`\n4.  We're drawing the data from the `penguin_focus` dataframe.\n\nLet's look at our model parameters now!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(mod_len_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 5\n  term             estimate std.error statistic   p.value\n  <chr>               <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)         19.4     0.119     163.   2   e-323\n2 bill_length_z        1.09    0.0955     11.4  8.66e- 26\n3 speciesChinstrap    -1.93    0.224      -8.62 2.55e- 16\n4 speciesGentoo       -5.11    0.191     -26.7  3.65e- 85\n```\n:::\n:::\n\n\nThe estimated effects of bill length and species in this multivariate model are *really* different from each separate univariate model. Let's look at them right next to each other, comparing the multivariate model to the \"glued together\" univariate model estimates.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"hkjfpluxom\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hkjfpluxom .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hkjfpluxom .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hkjfpluxom .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hkjfpluxom .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hkjfpluxom .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hkjfpluxom .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hkjfpluxom .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hkjfpluxom .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hkjfpluxom .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hkjfpluxom .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hkjfpluxom .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hkjfpluxom .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hkjfpluxom .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hkjfpluxom .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hkjfpluxom .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hkjfpluxom .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hkjfpluxom .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hkjfpluxom .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hkjfpluxom .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hkjfpluxom .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hkjfpluxom .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hkjfpluxom .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hkjfpluxom .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hkjfpluxom .gt_left {\n  text-align: left;\n}\n\n#hkjfpluxom .gt_center {\n  text-align: center;\n}\n\n#hkjfpluxom .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hkjfpluxom .gt_font_normal {\n  font-weight: normal;\n}\n\n#hkjfpluxom .gt_font_bold {\n  font-weight: bold;\n}\n\n#hkjfpluxom .gt_font_italic {\n  font-style: italic;\n}\n\n#hkjfpluxom .gt_super {\n  font-size: 65%;\n}\n\n#hkjfpluxom .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#hkjfpluxom .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hkjfpluxom .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hkjfpluxom .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hkjfpluxom .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hkjfpluxom .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hkjfpluxom .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"term\">term</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"multivariate\">multivariate</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"glued togther univariate\">glued togther univariate</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"term\" class=\"gt_row gt_left\" style=\"color: #000000;\">bill_length_z</td>\n<td headers=\"multivariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">1.09</td>\n<td headers=\"glued togther univariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">âˆ’0.46</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\" style=\"color: #000000;\">speciesChinstrap</td>\n<td headers=\"multivariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">âˆ’1.93</td>\n<td headers=\"glued togther univariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">0.07</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\" style=\"color: #000000;\">speciesGentoo</td>\n<td headers=\"multivariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">âˆ’5.11</td>\n<td headers=\"glued togther univariate\" class=\"gt_row gt_right\" style=\"color: #000000;\">âˆ’3.36</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n-   The effect of `bill_length_z` has gone from negative in the univariate model to positive in the multivariate model, meaning we're now predicting that as bill length gets longer, bill depth gets deeper.\n-   Chinstraps have gone from having a predicted bill depth that's just about the same as Adelies in the univariate model to a predicted shorter bill depth.\n-   Gentoos predicted to have a less deep bill than Adelies in both models, but the difference is predicted to be larger in the multivariate model.\n\nWhy are the estimates so different between the multivariate and univariate models? Let's get predicted values to plot over the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(             # <1>\n  mod_len_species,       # <2>\n  newdata = datagrid(    # <3> \n    bill_length_z = c(-2, 1, 0, 1, 2),           # <4>\n    species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\") # <4>\n  )\n) |> \n  tibble() ->   # <5>\n  pred_len_species\n```\n:::\n\n\n1.  `predictions()` from `{marginaleffects}`.\n2.  We're getting predictions from our multivariate `mod_len_species` model.\n3.  We're going to get predictions for the newdata generated by `datagrid()`. This time, because we're creating two columns, `datagrid()` is going to create a row for every combination of values in `bill_length_z` and `species`.\n4.  We want predictions for representative values of `bill_length_z` and `species`.\n5.  Conversion to a dataframe.\n\n<details>\n\n<summary>`pred_len_species`</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_len_species |> \n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"rowid\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.low\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"conf.high\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_length_z\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"species\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"response\",\"3\":\"17.18924\",\"4\":\"0.1275674\",\"5\":\"134.74640\",\"6\":\"0\",\"7\":\"16.93922\",\"8\":\"17.43927\",\"9\":\"17.15117\",\"10\":\"-2\",\"11\":\"Adelie\"},{\"1\":\"2\",\"2\":\"response\",\"3\":\"15.25605\",\"4\":\"0.3001052\",\"5\":\"50.83567\",\"6\":\"0\",\"7\":\"14.66785\",\"8\":\"15.84425\",\"9\":\"17.15117\",\"10\":\"-2\",\"11\":\"Chinstrap\"},{\"1\":\"3\",\"2\":\"response\",\"3\":\"12.08322\",\"4\":\"0.2678624\",\"5\":\"45.10982\",\"6\":\"0\",\"7\":\"11.55822\",\"8\":\"12.60822\",\"9\":\"17.15117\",\"10\":\"-2\",\"11\":\"Gentoo\"},{\"1\":\"4\",\"2\":\"response\",\"3\":\"20.46326\",\"4\":\"0.2008487\",\"5\":\"101.88396\",\"6\":\"0\",\"7\":\"20.06961\",\"8\":\"20.85692\",\"9\":\"17.15117\",\"10\":\"1\",\"11\":\"Adelie\"},{\"1\":\"5\",\"2\":\"response\",\"3\":\"18.53007\",\"4\":\"0.1160065\",\"5\":\"159.73305\",\"6\":\"0\",\"7\":\"18.30270\",\"8\":\"18.75744\",\"9\":\"17.15117\",\"10\":\"1\",\"11\":\"Chinstrap\"},{\"1\":\"6\",\"2\":\"response\",\"3\":\"15.35724\",\"4\":\"0.0920159\",\"5\":\"166.89770\",\"6\":\"0\",\"7\":\"15.17689\",\"8\":\"15.53759\",\"9\":\"17.15117\",\"10\":\"1\",\"11\":\"Gentoo\"},{\"1\":\"7\",\"2\":\"response\",\"3\":\"19.37192\",\"4\":\"0.1186355\",\"5\":\"163.28941\",\"6\":\"0\",\"7\":\"19.13940\",\"8\":\"19.60444\",\"9\":\"17.15117\",\"10\":\"0\",\"11\":\"Adelie\"},{\"1\":\"8\",\"2\":\"response\",\"3\":\"17.43873\",\"4\":\"0.1440456\",\"5\":\"121.06392\",\"6\":\"0\",\"7\":\"17.15640\",\"8\":\"17.72105\",\"9\":\"17.15117\",\"10\":\"0\",\"11\":\"Chinstrap\"},{\"1\":\"9\",\"2\":\"response\",\"3\":\"14.26590\",\"4\":\"0.1063852\",\"5\":\"134.09672\",\"6\":\"0\",\"7\":\"14.05739\",\"8\":\"14.47441\",\"9\":\"17.15117\",\"10\":\"0\",\"11\":\"Gentoo\"},{\"1\":\"10\",\"2\":\"response\",\"3\":\"21.55460\",\"4\":\"0.2912895\",\"5\":\"73.99717\",\"6\":\"0\",\"7\":\"20.98369\",\"8\":\"22.12552\",\"9\":\"17.15117\",\"10\":\"2\",\"11\":\"Adelie\"},{\"1\":\"11\",\"2\":\"response\",\"3\":\"19.62141\",\"4\":\"0.1562352\",\"5\":\"125.58893\",\"6\":\"0\",\"7\":\"19.31519\",\"8\":\"19.92762\",\"9\":\"17.15117\",\"10\":\"2\",\"11\":\"Chinstrap\"},{\"1\":\"12\",\"2\":\"response\",\"3\":\"16.44858\",\"4\":\"0.1544656\",\"5\":\"106.48704\",\"6\":\"0\",\"7\":\"16.14584\",\"8\":\"16.75133\",\"9\":\"17.15117\",\"10\":\"2\",\"11\":\"Gentoo\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n</details>\n\nLet's first plot these predicted values over the bill length x bill depth scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(           # <1>\n  penguin_focus,  # <1>\n  aes(            # <1>\n    bill_length_z, # <1>\n    bill_depth_mm, # <1>\n    color = species # <1>\n    )               # <1>\n)+                 #<1>\n  geom_point()+    # <1>\n  geom_line(                # <2>\n    data = pred_len_species, # <2>\n    aes(y = estimate)       # <2>\n  )+                       # <2>\n  geom_ribbon(               # <3>\n    data = pred_len_species, # <3>\n    aes(                     # <3>\n      ymin = conf.low,       # <3>\n      ymax = conf.high,      # <3>\n      fill = species         # <3>\n    ),                       # <3>\n    color = NA,             # <4>\n    alpha = 0.3             # <4>\n  ) +\n  scale_color_bright()+    # <5>\n  scale_fill_bright()      # <5>\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=576}\n:::\n:::\n\n\n1.  Setting up the scatter plot, this time coloring points according to penguin species.\n2.  Adding on the predicted values from `pred_len_species`.\n3.  Adding on confidence intervals.\n4.  The plot looks nicer with these settings.\n5.  Using our color scheme for both the color of the points & lines and the fill of the ribbons.\n\nWhat we can see now is that when looking at the data overall, the relationship between bill length and bill depth might be negative, but when looking *within each species*, the relationship is positive. For Adelies, penguins with longer bills have deeper bills, and the same goes for Chinstraps and Gentoos.\n\nThe original slope in the univariate model was negative because each species has a different baseline bill depth and different ranges of bill lengths. When fitting a univariate model that didn't take species into account, this results in a negative slope! This mismatch between the effect within groups vs combining groups is known as [Simpson's Paradox](https://en.wikipedia.org/wiki/Simpson%27s_paradox).\n\n## Remaining Questions:\n\n### Could we have predicted what the slopes were going to be in the multivariate model?\n\nWhen we were learning about centering and scaling predictors for univariate models, it was possible to calculate what the new parameters were going to be after (linearly) transforming them. Could we have mathematically calculated what the slopes were going to be in the multivariate model based on the two univariate models?\n\n**No.** The negative slope in the `bill_depth_mm ~ bill_length_z`, for example, was estimated with information about species missing (i.e. `bill_depth_mm`'s relationship to species and `bill_length_z`'s relationship to species).\n\n### Did the univariate models miscalculate the relationship between bill length, species, and bill depth?\n\n*No, not really*. As it turns out, the univariate models aren't very good models for predicting bill depth. If we compare their model fits as well as $R^2$ and goodness of fit heuristics, AIC and BIC, the multivariate model is preferred.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"skididyszw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#skididyszw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#skididyszw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#skididyszw .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#skididyszw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#skididyszw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#skididyszw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#skididyszw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#skididyszw .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#skididyszw .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#skididyszw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#skididyszw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#skididyszw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#skididyszw .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#skididyszw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#skididyszw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#skididyszw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#skididyszw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#skididyszw .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#skididyszw .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#skididyszw .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#skididyszw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#skididyszw .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#skididyszw .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#skididyszw .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#skididyszw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#skididyszw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#skididyszw .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#skididyszw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#skididyszw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#skididyszw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#skididyszw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#skididyszw .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#skididyszw .gt_left {\n  text-align: left;\n}\n\n#skididyszw .gt_center {\n  text-align: center;\n}\n\n#skididyszw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#skididyszw .gt_font_normal {\n  font-weight: normal;\n}\n\n#skididyszw .gt_font_bold {\n  font-weight: bold;\n}\n\n#skididyszw .gt_font_italic {\n  font-style: italic;\n}\n\n#skididyszw .gt_super {\n  font-size: 65%;\n}\n\n#skididyszw .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#skididyszw .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#skididyszw .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#skididyszw .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#skididyszw .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#skididyszw .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#skididyszw .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"r.squared\">r.squared</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"AIC\">AIC</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"BIC\">BIC</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"model\" class=\"gt_row gt_left\" style=\"color: #000000;\">~len</td>\n<td headers=\"r.squared\" class=\"gt_row gt_right\" style=\"color: #000000;\">0.06</td>\n<td headers=\"AIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">1,422</td>\n<td headers=\"BIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">1,433</td></tr>\n    <tr><td headers=\"model\" class=\"gt_row gt_left\" style=\"color: #000000;\">~species</td>\n<td headers=\"r.squared\" class=\"gt_row gt_right\" style=\"color: #000000;\">0.68</td>\n<td headers=\"AIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">1,054</td>\n<td headers=\"BIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">1,069</td></tr>\n    <tr><td headers=\"model\" class=\"gt_row gt_left\" style=\"color: #000000;\">~len + species</td>\n<td headers=\"r.squared\" class=\"gt_row gt_right\" style=\"color: #000000;\">0.77</td>\n<td headers=\"AIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">944</td>\n<td headers=\"BIC\" class=\"gt_row gt_right\" style=\"color: #000000;\">963</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nBut, just because the univariate models aren't ideal, that doesn't mean they miscalculated anything. When trying to estimate the effect of bill length on bill depth *in the absence of species information*, the slope *is* negative.\n\n### How do I visualize fitted multivariate models?\n\nOne important takeaway is that in order to visualize the results of a multivariate model, you *can't* just plot the fit of a univariate model. This plot doesn't show a line with a slope of 1.09.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguin_focus, \n  aes(\n    bill_length_z, \n    bill_depth_mm\n    )\n)+\n  geom_point()+\n  stat_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=576}\n:::\n:::\n\n\nInstead, you need to get predicted values from the multivariate model. The code above used `marginaleffects::predictions()` to do that, but there are actually lots of ways to go about it. For example, here's some base R code to do it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- expand.grid(\n  bill_length_z = c(-2, 1, 0, 1, 2),\n  species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n)\n\npred$estimate <- predict(mod_len_species, newdata = pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguin_focus,\n  aes(\n    bill_length_z,\n    bill_depth_mm,\n    color = species\n  )\n)+\n  geom_point() +\n  geom_line(\n    data = pred,\n    aes(y = estimate)\n  )+\n  scale_color_bright()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}